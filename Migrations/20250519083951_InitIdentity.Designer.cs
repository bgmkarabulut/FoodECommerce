// <auto-generated />
using System;
using FoodECommerce.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodECommerce.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250519083951_InitIdentity")]
    partial class InitIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FoodECommerce.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageName = "menüler.png",
                            Name = "Menus"
                        },
                        new
                        {
                            Id = 2,
                            ImageName = "burgers.png",
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = 3,
                            ImageName = "tatlılar.png",
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 4,
                            ImageName = "içecekler.png",
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = 5,
                            ImageName = "soslar.png",
                            Name = "Sauces"
                        },
                        new
                        {
                            Id = 6,
                            ImageName = "kids.png",
                            Name = "Kids Menu"
                        });
                });

            modelBuilder.Entity("FoodECommerce.Models.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("restaurant_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Deals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Yaz aylarına özel .",
                            ImageUrl = "images/deals/dondurmadeal.png",
                            Title = "Dondurma"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dörtlü Big King + Coca-Cola",
                            ImageUrl = "images/deals/dörtlüdeal.png",
                            Title = "Menü 4 Big King"
                        },
                        new
                        {
                            Id = 3,
                            Description = "TavukBurger menü ^KöfteBurger menü.",
                            ImageUrl = "images/deals/ikilideal.png",
                            Title = "Friends Menü"
                        },
                        new
                        {
                            Id = 4,
                            Description = "RodeoBurger menü + Onion Fries.",
                            ImageUrl = "images/deals/rodeodeal.png",
                            Title = "Rodeoo"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Big King + King Chicken",
                            ImageUrl = "images/deals/kralikili.png",
                            Title = "King 2"
                        },
                        new
                        {
                            Id = 6,
                            Description = "3 Whopper menü + Coca-Cola",
                            ImageUrl = "images/deals/üçlüwhopper.png",
                            Title = "Tripple Whopper"
                        });
                });

            modelBuilder.Entity("FoodECommerce.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Lezzetli tavuk burger menüsü.",
                            ImageUrl = "images/products/chickenroyalemenü.png",
                            Name = "Chicken Royale Menü",
                            Price = 250m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Lezzetli tavuk burger menüsü.",
                            ImageUrl = "images/products/tavukburgermenü.png",
                            Name = "Tavuk Burger Menü",
                            Price = 215m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Baharatlı menü seçeneği.",
                            ImageUrl = "images/products/spicymenü.png",
                            Name = "Spicy Menü",
                            Price = 230m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Klasik burger.",
                            ImageUrl = "images/products/whopper.png",
                            Name = "Whopper",
                            Price = 155m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "Barbekü soslu burger.",
                            ImageUrl = "images/products/rodeo.png",
                            Name = "Rodeo Burger",
                            Price = 135m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Tavuk burger.",
                            ImageUrl = "images/products/tavuklu.png",
                            Name = "Tavuklu Burger",
                            Price = 120m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 5,
                            Description = "Ballı hardal sos.",
                            ImageUrl = "images/products/ballımustrad.png",
                            Name = "Ball Mustard",
                            Price = 6m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 5,
                            Description = "Klasik ketçap.",
                            ImageUrl = "images/products/ketçap.png",
                            Name = "Ketçap",
                            Price = 6m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Description = "Klasik mayonez.",
                            ImageUrl = "images/products/mayonez.png",
                            Name = "Mayonez",
                            Price = 6m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Description = "Soslu dondurma.",
                            ImageUrl = "images/products/sundae.png",
                            Name = "Sundae",
                            Price = 45m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Description = "Kurabiye",
                            ImageUrl = "images/products/cookie.png",
                            Name = "Cookie",
                            Price = 45m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            Description = " Kola",
                            ImageUrl = "images/products/cocacola.png",
                            Name = "Coca-Cola",
                            Price = 40m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            Description = "Fanta",
                            ImageUrl = "images/products/fanta.png",
                            Name = "Fanta",
                            Price = 40m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            Description = "Sıcak çikolata",
                            ImageUrl = "images/products/sıcakçiko.png",
                            Name = "Hot Chocolate",
                            Price = 40m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 6,
                            Description = "Kids cheeseburger menüsü.",
                            ImageUrl = "images/products/kids2.png",
                            Name = "Kids Menü",
                            Price = 165m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 6,
                            Description = "Kids chicken tenders menüsü.",
                            ImageUrl = "images/products/kids3.png",
                            Name = "Kids Tenders Menü",
                            Price = 200m
                        });
                });

            modelBuilder.Entity("FoodECommerce.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("restaurant_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "İstanbul",
                            Latitude = "41.0082",
                            Longitude = "28.9784",
                            Name = "Food Express",
                            Rating = 5.0m
                        },
                        new
                        {
                            Id = 2,
                            City = "İstanbul",
                            Latitude = "41.0438",
                            Longitude = "29.0094",
                            Name = "Food Express Beşiktaş",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 3,
                            City = "İstanbul",
                            Latitude = "40.9760",
                            Longitude = "28.8570",
                            Name = "Food Express Bakırköy",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 4,
                            City = "İstanbul",
                            Latitude = "41.0165",
                            Longitude = "29.1241",
                            Name = "Food Express Ümraniye",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 5,
                            City = "Ankara",
                            Latitude = "39.9334",
                            Longitude = "32.8597",
                            Name = "Food Express",
                            Rating = 4.5m
                        },
                        new
                        {
                            Id = 6,
                            City = "Ankara",
                            Latitude = "39.9208",
                            Longitude = "32.8541",
                            Name = "Food Express Kızılay",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 7,
                            City = "Ankara",
                            Latitude = "39.9016",
                            Longitude = "32.8597",
                            Name = "Food Express Çankaya",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 8,
                            City = "Ankara",
                            Latitude = "40.0071",
                            Longitude = "32.8663",
                            Name = "Food Express Keçiören",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 9,
                            City = "İzmir",
                            Latitude = "38.4192",
                            Longitude = "27.1287",
                            Name = "Food Express Alsancak",
                            Rating = 4.8m
                        },
                        new
                        {
                            Id = 10,
                            City = "Bursa",
                            Latitude = "40.1826",
                            Longitude = "29.0668",
                            Name = "Food Express Özlüce",
                            Rating = 4.7m
                        },
                        new
                        {
                            Id = 11,
                            City = "Antalya",
                            Latitude = "36.8969",
                            Longitude = "30.7133",
                            Name = "Food Express Antalya",
                            Rating = 4.6m
                        },
                        new
                        {
                            Id = 12,
                            City = "Adana",
                            Latitude = "37.0017",
                            Longitude = "35.3213",
                            Name = "Food Express Adana",
                            Rating = 4.9m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CartItem", b =>
                {
                    b.HasOne("Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodECommerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodECommerce.Models.Product", b =>
                {
                    b.HasOne("FoodECommerce.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
